name: CI/CD to ECS via Terraform

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPO: my-prod-app
  CLUSTER_NAME: my-prod-cluster
  SERVICE_NAME: my-prod-app-service
  CONTAINER_NAME: my-prod-app

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        id: build-image
        run: |
          IMAGE_TAG=latest
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:$IMAGE_TAG"

          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_OUTPUT

          docker build -t $IMAGE_URI .

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_URI }}
          format: 'table'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Push image to ECR
        run: |
          docker push ${{ env.IMAGE_URI }}

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init

      - name: Apply Terraform with dynamic image URI
        working-directory: terraform
        run: |
          terraform apply -auto-approve \
            -var="ecr_image_uri=${{ env.IMAGE_URI }}"